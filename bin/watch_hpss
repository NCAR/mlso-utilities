#!/usr/bin/env python

import argparse
import collections
import datetime
import glob
import logging
import os
import signal
import subprocess
import sys
import time


# locations

QUEUE_ROOT = '/hao/mlsodata3/Data/HPSS-Queue'
#QUEUE_ROOT = '/home/mgalloy/hpss-queue'

HPSS_ROOT  = '/CORDYN'
#HPSS_ROOT  = '/home/mgalloy'
#HPSS_ROOT  = '/home/mgalloy/hpss-root'

HSI_ROOT   = '/opt/local/hpss'

# logging

LOG_ROOT = '/hao/acos/ucomp/logs'
LOG_FMT  = '%(asctime)s %(levelname)s: %(module)s: %(message)s'
DATE_FMT = '%Y-%d-%m %H:%M:%S'

# time between polling (seconds)
POLL_DELAY = 1.0
# how frequently to check for data, i.e., check every 12 polls for new data
POLLS_PER_DATA_CHECK = 60

# nicer names for signal constants
signal_names = collections.defaultdict(str, {signal.SIGINT:  'SIGINT',
                                             signal.SIGTERM: 'SIGTERM'})


class SignalWatcher:
    '''Register for SIGHUP/SIGINT/SIGTERM to allow user to exit at appropriate
       times.

       Typical usage would be to enter a SignalWatcher as a context manager and
       check it at convenient times to determine if the application should
       stop::

         with SignalWatcher() as watcher:
             while True:
                 # do stuff
                 if watcher.is_terminated:
                     break
    '''

    def __init__(self, signals=None):
        if signals is None:
            signals = [signal.SIGHUP, signal.SIGINT, signal.SIGTERM]
        self.signals = signals
        self.is_terminated = False
        self.signum = 0

    def __enter__(self):
        self.original_handlers = {s: signal.getsignal(s) for s in self.signals}
        for s in self.signals:
            signal.signal(s, self.handle_signal)
        return(self)

    def __exit__(self, exc_type, exc_value, traceback):
        for s in self.signals:
            signal.signal(s, self.original_handlers[s])

    def handle_signal(self, signum, frame):
        self.is_terminated = True
        self.signum = signum


class DirectoryLock:
    '''Represents a lock on a directory with a lock file, by default .lock in
       the given directory.

       Typical usage would be to use as a context manager to do operations in a
       given directory that shouldn't be done by another process using the same
       lock file::

           with DirectoryLock(dir):
               # do stuff in dir
    '''

    def __init__(self, dir, lock_name='.lock'):
        self.dir = dir
        self.have_lock = False
        self.lock_name = lock_name

    @property
    def lock_file(self):
        return(os.path.join(self.dir, self.lock_name))

    def __enter__(self):
        '''Lock the directory unless already locked.
        '''
        if os.path.exists(self.lock_file):
            self.have_lock = False
        else:
            self.have_lock = True
            open(self.lock_file, 'w').close()
            logging.debug('locked %s' % self.dir)

    def __exit__(self, exc_type, exc_value, traceback):
        '''Unlock the directory if we already have the lock.
        '''
        if self.have_lock:
            os.remove(self.lock_file)
            self.have_lock = False
            logging.debug('released lock on %s' % self.dir)


class Local:
    '''Represents a lock file system using the same API as HPSS. Used for
       testing instead of sending files to the actual HPSS.
    '''

    def __init__(self):
        pass

    def __enter__(self):
        '''Open connection to local system'''
        logging.info('opened connection to local system')
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        '''Close connection to local system'''
        logging.info('closed connection to local system')

    def put(self, src, dst):
        '''Send src to dst. Do not overwrite dst.
        '''
        logging.info('putting %s -> %s' % (src, dst))
        cmd = ['cp', '--no-clobber', src, dst]
        process = subprocess.Popen(cmd,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.STDOUT)
        output, _ = process.communicate()
        process.wait()

        if process.returncode != 0:
            logging.error('problem with cmd: "%s"' % ' '.join(cmd))
            logging.error(output.decode('utf-8'))
            raise IOError('problem putting %s -> %s' % (src, dst))

    def file_size(self, filename):
        '''Return file size of given filename in bytes.'''
        cmd = ['ls', '-l', filename]
        process = subprocess.Popen(cmd,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.STDOUT)
        output, _ = process.communicate()
        process.wait()

        if process.returncode != 0:
            logging.error('problem with cmd: "%s"' % ' '.join(cmd))
            logging.error(output)
            raise IOError('problem finding size of %s' % filename)

        return(int(output.split()[4]))


class HPSS:
    '''Represents the HPSS and the actions that can be performed on it.
    '''

    def __init__(self):
        pass

    def __enter__(self):
        '''Open connection to HPSS'''
        logging.info('opened connection to HPSS')
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        '''Close connection to HPSS'''
        logging.info('closed connection to HPSS')

    def put(self, src, dst):
        '''Send src to dst. Do not overwrite dst.
        '''
        logging.info('putting %s -> %s' % (src, dst))
        hsi_cmd = ['%s/bin/hsi' % HSI_ROOT, '-q', '-P', 'cput', src, ':', dst]
        process = subprocess.Popen(hsi_cmd,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.STDOUT)
        output, _ = process.communicate()
        process.wait()

        if process.returncode != 0:
            logging.error('problem with cmd: "%s"' % ' '.join(hsi_cmd))
            logging.error(output)
            raise IOError('problem putting %s -> %s' % (src, dst))

    def file_size(self, filename):
        '''Return file size of given filename in bytes.'''
        hsi_cmd = ['%s/bin/hsi' % HSI_ROOT, '-q', '-P', 'ls', '-P', filename]
        process = subprocess.Popen(hsi_cmd,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.STDOUT)
        output, _ = process.communicate()
        process.wait()

        if process.returncode != 0:
            logging.error('problem with cmd: "%s"' % ' '.join(hsi_cmd))
            logging.error(output)
            raise IOError('problem finding size of %s' % filename)

        return(int(output.split()[2]))


def move_file(src_filename, dst_root, file_system):
    '''Send source file to destination root with the same basename using the
       given file system. Delete source file when confirmed done.
    '''

    basename = os.path.basename(src_filename)
    local_size = os.path.getsize(src_filename)
    year = basename[0:4]

    dst_filename = os.path.join(dst_root, year, basename)

    file_system.put(src_filename, dst_filename)
    hpss_size = file_system.file_size(dst_filename)

    if local_size != hpss_size:
        raise IOError('size on HPSS (%d) != local size (%d)' % (hpss_size, local_size))

    logging.info('removing %s from queue dir' % basename)
    os.remove(src_filename)


def main():
    name = 'HPSS Watcher'
    desc = 'Watch for files to send to HPSS'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('instrument', type=str, nargs=1,
                        help='instrument to watch for, e.g., KCor, CoMP, UCoMP, etc.')
    args = parser.parse_args()

    instrument = args.instrument[0]

    today = datetime.date.today()

    log_basename = '%s.%s.hpss.log' % (today.strftime('%Y%m%d'), instrument.lower())
    log_filename = os.path.join(LOG_ROOT, log_basename)

    logging.basicConfig(filename=log_filename,
                        format=LOG_FMT, datefmt=DATE_FMT,
                        level=logging.DEBUG)

    logging.info('starting %s\n%s' % (name, sys.version))

    with HPSS() as file_system:
        src_root = os.path.join(QUEUE_ROOT, instrument)
        dst_root = os.path.join(HPSS_ROOT, instrument.upper())
        with SignalWatcher() as signal_watcher:
            i = 0
            while True:
                if signal_watcher.is_terminated:
                    break
                else:
                    i += 1
                    if i % POLLS_PER_DATA_CHECK == 0:
                        i = 0

                        with DirectoryLock(src_root) as lock:
                            logging.info('checking %s' % src_root)

                            for src_filename in glob.glob(os.path.join(src_root, '*')):
                                try:
                                    move_file(src_filename, dst_root, file_system)
                                except IOError as e:
                                    logging.warning(e)
                                    break

                                if signal_watcher.is_terminated: break

                    if signal_watcher.is_terminated:
                        break
                    else:
                        time.sleep(POLL_DELAY)

            logging.info('exited from %s' % signal_names[signal_watcher.signum])
            logging.shutdown()


if __name__ == '__main__':
    main()
